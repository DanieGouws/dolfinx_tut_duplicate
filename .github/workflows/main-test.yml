# This is a basic workflow to help you get started with Actions
name: Test against DOLFINx main

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [dokken/jupyterbook]
  pull_request:
    branches:
      - dokken/jupyterbook

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  # Test every day at 9 am
  schedule:
    - cron: "* 9 * * 1"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  test-against-master:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container: dolfinx/dolfinx

    env:
      HDF5_MPI: "ON"
      PYVISTA_OFF_SCREEN: true

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          pip3 install --upgrade pip setuptools
          CC=mpicc HDF_MPI="ON" HDF5_DIR="/usr/lib/x86_64-linux-gnu/hdf5/mpich/" pip3 install --no-cache-dir -r docker/requirements.txt
          apt-get -qq update
          apt-get install -y libgl1-mesa-dev xvfb nodejs
          apt-get clean
          rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
          jupyter nbextension enable --py --sys-prefix ipygany 
          rm -rf /usr/local/share/.cache/*
          jupyter-book -h
      - name: Test building the book
        run: 
          PYVISTA_JUPYTER_BACKEND=static PYVISTA_OFF_SCREEN=false jupyter-book build  -W .
      - name: Test notebooks in parallel
        run: |
          cd chapter1
          python3 -c "from pyvista import start_xvfb; start_xvfb(0.1)"
          jupyter-nbconvert --to python fundamentals_code.ipynb
          mpirun -n 2 python3 fundamentals_code.py
          jupyter-nbconvert --to python nitsche.ipynb
          mpirun -n 2 python3 nitsche.py
          jupyter-nbconvert --to python membrane_code.ipynb
          mpirun -n 2 python3 membrane_code.py
          cd ../chapter2
          jupyter-nbconvert --to python diffusion_code.ipynb
          mpirun -n 2 python3 diffusion_code.py
          jupyter-nbconvert --to python heat_code.ipynb
          mpirun -n 2 python3 heat_code.py
          jupyter-nbconvert --to python linearelasticity_code.ipynb
          mpirun -n 2 python3 linearelasticity_code.py
          jupyter-nbconvert --to python hyperelasticity.ipynb
          mpirun -n 2 python3 hyperelasticity.py
          jupyter-nbconvert --to python nonlinpoisson_code.ipynb
          mpirun -n 2 python3 nonlinpoisson_code.py
          jupyter-nbconvert --to python ns_code1.ipynb
          mpirun -n 2 python3 ns_code1.py
          jupyter-nbconvert --to python ns_code2.ipynb
          mpirun -n 2 python3 ns_code2.py
          cd ../chapter3
          jupyter-nbconvert --to python neumann_dirichlet_code.ipynb
          mpirun -n 3 python3 neumann_dirichlet_code.py
          jupyter-nbconvert --to python multiple_dirichlet.ipynb
          mpirun -n 3 python3 multiple_dirichlet.py
          jupyter-nbconvert --to python subdomains.ipynb
          mpirun -n 3 python3 subdomains.py
          jupyter-nbconvert --to python robin_neumann_dirichlet.ipynb
          mpirun -n 3 python3 robin_neumann_dirichlet.py
          jupyter-nbconvert --to python component_bc.ipynb
          mpirun -n 3 python3 component_bc.py
          jupyter-nbconvert --to python em.ipynb
          mpirun -n 3 python3 em.py
          cd ../chapter4
          jupyter-nbconvert --to python solvers.ipynb
          mpirun -n 3 python3 solvers.py
          jupyter-nbconvert --to python convergence.ipynb
          mpirun -n 3 python3 convergence.py
          jupyter-nbconvert --to python compiler_parameters.ipynb
          mpirun -n 3 python3 compiler_parameters.py
